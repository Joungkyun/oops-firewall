#!/bin/sh
#
# $Id: oops-firewall,v 1.5 2007-01-09 14:19:37 oops Exp $
#
# OOPS Firewall : Very Easy Iptables frontend
# Copyright by JoungKyun.Kim
#

TEXTDOMAIN=oops-firewall
TEXTDOMAINDIR=@shareddir@/locale

_confdir="@confdir@"
_includes="@includedir@"
export _confdir _includes

NB=0

# include function list
source ${_includes}/oops-firewall.h

# init modules
${c_depmod} -a &> /dev/null

# parse option
opts=$(${c_getopt} ac:htvV $*)
[ $? -ne 0 ] && usage
set -- ${opts}

for i
do
	case "$i" in
		-a) _bridgeclear=1; shift;;
		-t) _testmode=1; shift;;
		-v) _verbose=1; shift;;
		-c) _confdir=$2; shift; shift;;
		-V) printVersion;;
		--) shift; break;;
	esac
done

[ $# -ne 0 ] && usage

[ $_verbose -eq 1 ] && printBanner clear

#
# check user type
#
next_numbering
o_echo
o_echo -n $"${NB}. Check user type"

isroot

if [ $? -ne 0 ]; then
	print_result 1 $"U are not super user!"
	exit 1
else
	print_result 0
fi


#
# Kernel version check
#

next_numbering
o_echo
o_echo -n $"${NB}. Kernel version check"
kernelCheck

case "$?" in
	2)
		print_result 1 $"Enable to use over kernel 2.4.0"
		exit 1
		;;
	1)
		extend_mangle=1
		print_result 0
		;;
	*)
		extend_mangle=0
		print_result 0
		;;
esac
export extend_mangle

#
# IP Address check
#

next_numbering
o_echo
o_echo $"${NB}. IP address Check"
o_echo

[ $_bridgeclear -eq 1 ] && clear_bridge

# get device list
getDeviceList devlist

# parse device information
for dv in ${devlist}
do
	makeDeviceEnv ${dv}
done

# print device information
for dv in ${devlist}
do
    chkIP=
    chkSN=
    chkNT=

    parseDevice "${dv}" devName devNum
    eval "chkIP=\${${devName}${devNum}_IPADDR}"

    if [ -n "${chkIP}" ]; then

      eval "chkSN=\${${devName}${devNum}_SUBNET}"
      eval "chkNT=\${${devName}${devNum}_NET}"

      o_echo $"  * ${devName}${devNum} Information"
      o_echo -n $"    IP ADDRESS"
      print_result 0 "${chkIP}" "yellow"
      o_echo -n $"    SUBNET MASK"
      print_result 0 "${chkSN}" "yellow"
      o_echo -n $"    NETWORK"
      print_result 0 "${chkNT}" "yellow"
      o_echo
    fi
done

# if exists mine.conf, add in configuration list
[ -f "${_confdir}/mine.conf" ] && _configs="${_configs} mine"

# read configurations
for i in ${_configs}
do
	conf_context=
	conf_context=$(${c_sed} -n -f ${_includes}/config.sed ${_confdir}/${i}.conf)
	eval ${conf_context}
done

# check directive with true/false values (true: 1, false: 0)
for cVAR in ALLOWSELF USE_LOG MASQ_USED BRIDGE_USED BRUTE_FORCE_LOG
do
	eval "cVARTMP=\$${cVAR}"
	parseValue "$cVARTMP" "$cVAR"
done

next_numbering
o_echo $"${NB}. Interface Information"
o_echo

# interface name check
firewall_wan_check
bridge_wan_check

for interface in FIREWALL_WAN MASQUERADE_WAN MASQUERADE_LOC BRIDGE_WANDEV BRIDGE_LOCDEV
do
	if [ -n "$(echo ${interface} | ${c_grep} BRIDGE)" ]; then
		[ $BRIDGE_USED -eq 0 ] && continue;
	fi

	eval "intTmpName=\$${interface}"
	intTmpName=${intTmpName:="Not Set"}
	o_echo -n "  * ${interface}"
	print_result 0 "${intTmpName}" "yellow"
done
o_echo


#
# global configuration
#

next_numbering
o_echo $"${NB}. Reset Netfilter"
o_echo

ins_mod
o_echo

# Init Service
init_service


#
# Bridge Init
#
next_numbering
o_echo
o_echo $"${NB}. Init Bridge Mode"
o_echo

init_bridge


#
# Init Kernel parameter
#

next_numbering
o_echo
o_echo $"${NB}. Basic Kernel Parameter Configuration"
o_echo

init_kernel


#
# Deny Invalid Packet
#

next_numbering
o_echo
o_echo $"${NB}. Drop Invalid Package"
o_echo

init_invalid

#
# Allow All Service
#

next_numbering
o_echo
o_echo $"${NB}. Allow All Service"
o_echo

add_all_rule

#
# User define command (execute "!" command)
#

next_numbering
o_echo
o_echo $"${NB}. Execute user defined pre command"
o_echo
user_cmd "pre"


#
# Outgoing Service configuration
#

next_numbering
o_echo
o_echo $"${NB}. Allow Outgoing Service Configuration"
o_echo

add_port_rule outgoing OUT_TCP_ALLOWPORT OUT_UDP_ALLOWPORT
add_brport_rule outgoing OUT_TCP_ALLOWPORT OUT_UDP_ALLOWPORT

o_echo $"  * Name Service Configuration"
add_named_port
o_echo
[ "$BRIDGE_USED" -ne 0 ] && {
	o_echo $"  * Bridge Name Service Configuration"
	add_named_port BRIDGE
}


#
# Incoming Service configuration 
#

next_numbering
o_echo
o_echo $"${NB}. Allow Incoming Service Configuration"
o_echo

add_port_rule incoming TCP_ALLOWPORT TCP_HOSTPERPORT UDP_ALLOWPORT UDP_HOSTPERPORT
add_brport_rule incoming BR_TCP_ALLOWPORT BR_TCP_HOSTPERPORT BR_UDP_ALLOWPORT BR_UDP_HOSTPERPORT

[ -f "${_tmpifile}" ]  && rm -rf "${_tmpifile}"  >& /dev/null
[ -f "${_tmpofile}" ]  && rm -rf "${_tmpofile}"  >& /dev/null
[ -f "${_passiveif}" ] && rm -rf "${_passiveif}" >& /dev/null
[ -f "${_passiveof}" ] && rm -rf "${_passiveof}" >& /dev/null

# for icmp

o_echo "  * ICMP service Configuration"
add_icmp_host ICMP_HOSTPERPING ICMP_HOSTPERTRACE
add_bricmp_host BR_ICMP_HOSTPERPING BR_ICMP_HOSTPERTRACE


#
# Masqurade Configuration
#

next_numbering
o_echo
o_echo $"${NB}. Masqurade Configuration"
o_echo

add_masq_rule


#
# Forwarding Configuration
#

next_numbering
o_echo
o_echo $"${NB}. Forwarding Configuration"
o_echo

add_forward_rule


#
# User define command (execute "!" command)
#

next_numbering
o_echo
o_echo $"${NB}. Execute user defined post Command"
o_echo
user_cmd "post"


#
# Tos Configuration
#

next_numbering
o_echo
o_echo $"${NB}. TOS Configuration"
o_echo

add_tos_rule
[ $? -ne 0 ] && {
	o_echo
	o_echo $"  * TOS Not Config"
	o_echo
}


#
# Deny rule set
#

next_numbering
o_echo
o_echo $"${NB}. Deny rule set configuration"
o_echo

init_deny

o_echo

exit 0
