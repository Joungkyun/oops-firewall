#!/bin/sh
#
# OOPS Firewall 네트워크 서버 방화벽 설정 2.0
# 작성 : 김정균 http://www.oops.org
# 날짜 : 2003.03.21
# 
# -N 새로운 체인 만들기
# -X 비어있는 체인을 제거하기
# -P 미리 만들어진 체인의 정책을 바꾸기
# -L 어떤 체인의 규칙들을 나열하기
# -F 체인으로부터 규칙들을 지우기
# -Z 체인내의 모든 규칙들의 패킷과 바이트의 카운드를 0 으로 만들기
# 
# -A 체인에 새로운 규칙을 추가하기
# -I 체인의 어떤 지점에 규칙을 삽입하기
# -R 체인의 어떤 지점의 규칙을 교환하기
# -D 체인의 어떤 지점의 규칙을 제거하기
# -D 체인에서 일치하는 첫번째 규칙을 제거하기
# 
# -s 출처
# -d 목적지
# -p 프로토콜
# -i 인터페이스 ( input, foward 에서만 )
# -o 인터페이스 ( foward, output 에서만 )
# -f 분절
# -j ~로 점프
# --syn ipchains 의 -y option
# -m
# --dport 목적지의 포트 정의 (범위 지정은 22:50 과 같이)
# --sport 출추의 포트 정의
#

##############################################################################
# 권한 체크
##############################################################################

if [ "$UID" != "0" ]; then
  if [ "$LANG" = "ko" ]; then
    echo "에러 - Root 의 권한으로 작동해야 합니다."
  else
    echo "U are not super user!"
  fi
  exit 1
fi

##############################################################################
# Default 변수 설정
##############################################################################

# 방화벽 프로그램 지정
IPTABLES=/sbin/iptables

# 자신의 NETWORK 설정
ETH0_IPADDR=`/sbin/ifconfig eth0 2> /dev/null | grep 'inet addr' | awk '{print $2}' | sed -e 's/.*://'`
ETH0_SUBNET=`/sbin/ifconfig eth0 2> /dev/null | grep 'inet addr' | awk '{print $4}' | sed -e 's/.*://'`
ETH0_NET=`route -n | grep -w U | grep eth0 | awk '{print $1}'`

ETH1_IPADDR=`/sbin/ifconfig eth1 2> /dev/null | grep 'inet addr' | awk '{print $2}' | sed -e 's/.*://'`
ETH1_SUBNET=`/sbin/ifconfig eth1 2> /dev/null | grep 'inet addr' | awk '{print $4}' | sed -e 's/.*://'`
ETH1_NET=`route -n | grep -w U | grep eth1 | awk '{print $1}'`

# 설정 파일을 불러들임
. /etc/oops_firewall/oops_firewall.conf

##############################################################################
# GLOBAL 설정
##############################################################################

# IP forwarding 을 가능하게
# 이 설정은 나중 FORWARD 규칙이 추가될때를 대비해 미리 설정
# echo 1 > /proc/sys/net/ipv4/ip_forward

# TCP Syncookies 를 사용할수 있게 하기 위해
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# RFC1812에 따른 IP spoof 방지를 위한 설정(커널 2.2 이상 버전)
# 아래에서 ip 스푸핑 해당 항목 참고
for pfile in /proc/sys/net/ipv4/conf/*/rp_filter
do
  echo 1 > $pfile
done

# ip 주소를 스푸핑한다고 예상되는 경우 로그에 기록하기

echo 1 > /proc/sys/net/ipv4/conf/all/log_martians

# 브로드캐스트, 멀티캐스트 주소에 ICMP 메시지 보내는것 막기
# "smurf" 공격 방지용
# 아래에서 해당 조항 참고
# 커널 2.2 이상에 해당

echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# 모든 서비스를 허가
${IPTABLES} -A INPUT -i lo -j ACCEPT

if [ "${ALLOWSELF}" = "1" ]; then
  echo "${IPTABLES} -A INPUT -s ${ETH0_NET}/${ETH0_SUBNET} -j ACCEPT"
  ${IPTABLES} -A INPUT -s ${ETH0_NET}/${ETH0_SUBNET} -j ACCEPT
  if [ "${ETH1_IPADDR}" != "" ]; then
    echo "${IPTABLES} -A INPUT -s ${ETH1_NET}/${ETH1_SUBNET} -j ACCEPT"
    ${IPTABLES} -A INPUT -s ${ETH1_NET}/${ETH1_SUBNET} -j ACCEPT
  fi
else
  echo "${IPTABLES} -A INPUT -s ${ETH0_IPADDR} -j ACCEPT"
  ${IPTABLES} -A INPUT -s ${ETH0_IPADDR} -j ACCEPT
  if [ "${ETH1_IPADDR}" != "" ]; then
    echo "${IPTABLES} -A INPUT -s ${ETH1_IPADDR} -j ACCEPT"
    ${IPTABLES} -A INPUT -s ${ETH1_IPADDR} -j ACCEPT
  fi
fi

if [ "${ALLOWALL}" != "" ] ; then
  for values in ${ALLOWALL}
  do
    echo "${IPTABLES} -A INPUT -s ${values} -j ACCEPT"
    ${IPTABLES} -A INPUT -s ${values} -j ACCEPT
  done
fi

##############################################################################
# TCP 설정
##############################################################################

# 모든 곳으로의 포트를 open
if [ "${TCP_ALLOWPORT}" != "" ]; then
  for values in ${TCP_ALLOWPORT}
  do
    echo "${IPTABLES} -A INPUT -p tcp --dport ${values} -j ACCEPT"
    ${IPTABLES} -A INPUT -p tcp --dport ${values} -j ACCEPT
  done
fi

# 특정 호스트로의 포트를 open

if [ "${TCP_HOSTPERPORT}" != "" ]; then
  for values in ${TCP_HOSTPERPORT}
  do
    echo ${values} | {
      IFS=':' read hosts ports
      echo "${IPTABLES} -A INPUT -s ${hosts} -p tcp --dport ${ports} -j ACCEPT"
      ${IPTABLES} -A INPUT -s ${hosts} -p tcp --dport ${ports} -j ACCEPT
    }
  done
fi

##############################################################################
# UDP 설정
##############################################################################

# 모든 곳으로의 포트를 open
if [ "${UDP_ALLOWPORT}" != "" ]; then
  for values in ${UDP_ALLOWPORT}
  do
    echo "${IPTABLES} -A INPUT -p udp --dport ${values} -j ACCEPT"
    ${IPTABLES} -A INPUT -p udp --dport ${values} -j ACCEPT
  done
fi  
  
# 특정 호스트로의 포트를 open

if [ "${UDP_HOSTPERPORT}" != "" ]; then
  for values in ${UDP_HOSTPERPORT}
  do
    echo ${values} | {
      IFS=':' read hosts ports
      echo "${IPTABLES} -A INPUT -s ${hosts} -p udp --dport ${ports} -j ACCEPT"
      ${IPTABLES} -A INPUT -s ${hosts} -p udp --dport ${ports} -j ACCEPT
    }
  done
fi

##############################################################################
# ICMP 설정
##############################################################################

# 특정 호스트에 ping 을 열어줄때
if [ "${ICMP_HOSTPERPING}" != "" ]; then
  for values in ${ICMP_HOSTPERPING}
  do
    echo "${IPTABLES} -A INPUT -s ${values} -p icmp --icmp-type echo-request -j ACCEPT"
    ${IPTABLES} -A INPUT -s ${values} -p icmp --icmp-type echo-request -j ACCEPT
  done
fi

##############################################################################
# DENY 정책
##############################################################################

# 모든 서비스를 거부
if [ "${TCP_DENYPORT}" != "" ]; then
  echo "${IPTABLES} -A INPUT -d ${ETH0_IPADDR} -p tcp --syn -j DROP"
  ${IPTABLES} -A INPUT -d ${ETH0_IPADDR} -p tcp --syn -j REJECT
  echo "${IPTABLES} -A INPUT -p tcp --dport 1:${TCP_DENYPORT} -j DROP"
  ${IPTABLES} -A INPUT -p tcp --dport 1:${TCP_DENYPORT} -j DROP
fi
if [ "${UDP_DENYPORT}" != "" ]; then
  echo "${IPTABLES} -A INPUT -p udp --dport 1:${UDP_DENYPORT} -j DROP"
  ${IPTABLES} -A INPUT -p udp --dport 1:${UDP_DENYPORT} -j DROP
fi
echo "${IPTABLES} -A INPUT -p icmp --icmp-type echo-request -j REJECT"
${IPTABLES} -A INPUT -p icmp --icmp-type echo-request -j REJECT

# 어떤 이유로 확인할수 없는 패킷들을 drop 시킴
echo "${IPTABLES} -A INPUT -m state --state INVALID -j DROP"
${IPTABLES} -A INPUT -m state --state INVALID -j DROP

exit 0
